/*
    File: _assets/css/scss/_libs-functions.scss
*/
// Typography

@function fs($size) {
	@return map-get($font-sizes, $size);
}

@function computeLineHeight($font-size, $computed) {
  $fs: strip-units($font-size);
  @return $computed / $fs;
}
   

// Map helpers 

// thanks to @ericmsuzanne for this function 
@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}


@function forms($property, $value) {
    @return map-get(map-get($forms, $property), $value);
}

@function borders($border) {
	@return map-get($borders, $border);
}

@function btn($button, $property: 'height') {
    @return map-get(map-get($buttons, $button), $property);

}

// Layout

@function r($lines) {
    @return $lines * $magic-ratio + rem;
}


@function gutter($lines: 1, $gutter: $base-vr) {
	@return ($gutter * $lines) * 1px;
}

@function gridCalc($columns,$total_coloumns: $base-max-columns) {
	@return percentage($columns / $total_coloumns);
}

@function context($width, $max-width: $base-max-width) {

	@return percentage($width / $max-width);
}



// help funtions

@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}

@function rem($font-size) {
	@return ($font-size / $base-font-size) * 1rem;
}


// colour functions
// Add percentage of white to a color
@function tint($color, $percent){
 	@return mix(white, $color, $percent);
}
 
// Add percentage of black to a color
@function shade($color, $percent){
 	@return mix(black, $color, $percent);
}

@function beta($color) {
	@return tint($color,$beta);
}

@function gamma($color) {
	@return tint($color,$gamma);
}

@function delta($color) {
	@return tint($color,$delta);
}

// http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/
// use eg palette(accent,light)
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($palettes, $palette), $tone);
}

@function theme($tone) {
	@return map-get(map-get($palettes, 'themes'), $tone);
}


// Sprite 
@function sprite-spacing($sprite, $property: width, $excess: 0) {

	$ext: if($property == width, 5, 6);
	// 5 == width
	// 6 == height
	$spacing:  nth($sprite, 5);


	@return $spacing + $excess;
}


@function opposite($arg) {

	$output: null;

	@if $arg == left {
		$output: right;
	}
	@if $arg == right {
		$output: left;
	}
	@if $arg == top {
		$output: bottom;
	}
	@if $arg == bottom {
		$output: top;
	}

	@return $output;

}